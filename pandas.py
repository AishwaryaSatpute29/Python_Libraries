# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h2uAuH-bPDY8VQw5qJzrwOIHwa276E0o
"""

import numpy as np
import pandas as pd

# DataFrame >> 2D Data Structure
# Series >> 1D Data Structure

# df.columns
# df.index
# df.axes
# df.dtypes
# df.select_dtypes(include,exclude)
# df.info()
# df.describe()
# df.shape

# Access Rows and Columns
# 1.df.iloc:
#    df.iloc[row_index,col_index]
#    df.iloc[row_index]
#    df.iloc[:,col_index]
#    df.iloc[row_index_list,col_index_list]

# 2.df.loc:
#    df.loc[row_labels,col_labels]
#    df.loc[row_labels]
#    df.loc[:,col_labels]
#       start and end labels will be included

# 3. df[col_name]  # single column with all rows

# 4. df[col1,col2,col3,....,colN] # Multiple columns with all rows

# 5. df[start_row_index : end_row_index]  # Access rows

# 6. df.head()  >> First N rows, Default value is 5

# 7. df.()tail  >> last N rows, Default value is 5

# 1. Detect Missing values:
      # df.isna()
      # df.isnull()
      # df.isna().sum()
      # df.isnull().sum()
      # df.isna().mean()
      # df.isna().mean()*100


# 2. Drop Null Values:
        # df.dropna(thresh = col_conut,axis=0, inplace=False)
        # df.dropna(thresh = row_conut,axis=1, inplace=False)


        # df.drop('Col_Name',axis=1, inplace=False)
        # df.drop([col1,col2,...colN],axis=1, inplace=True/False)
        # df.drop("Row Name",axis=0,inplace=False)
             # df.drop("Row Name", inplace=False)
        # df.drop([Row1,Row2,........,RowN],axis=0)


# 3.Input Missing Values:
      #  df.fillna(values,inplace=False)

      # statistical Method
        #  df['ColName'].mean()
        #  df['ColName'].median()
        #  df['ColName'].mode()[0]


# Mean: If outliers are not present in data
# Median: If outliers are  present in data
# Mode: Categorical Data

# df.describe(include='all')  Return stats of all numerical columns
    #  df['ColName'].mean()
    #  df['ColName'].median()
    #  df['ColName'].mode()[0]
    #  df['ColName'].std()
    #  df['ColName'].var()
    #  df['ColName'].min()
    #  df['ColName'].max()


# Quantiles:
      #  df['ColName'].quantile(0.25) #25%
      #  df['ColName'].quantile(0.50) #50% Median
      #  df['ColName'].quantile(0.75) #75%

array1 = np.random.randint(20,40,size=(6,5))
array1

# convertion of array to DataFrame
df = pd.DataFrame(array1)
df

# update column name and row index
df = pd.DataFrame(array1,columns=list("ABCDE"),index=list("PYTHON"))
df

df = pd.read_csv('/content/iplmatches.csv')
df

df.columns

df.columns = list('ABCDEFGHIJKLMNOPQR')
df

df.index

df.axes

df.dtypes

data = {"W":[1,2,3,'4',5],      # object
        "X":[3,4,5,6,7],         # integer
        "Y":[10,20,30,40,50],        # integer
        "Z":['PYTHON','ML','DL','DS','NLP']}  # object
test_df = pd.DataFrame(data)
test_df

import pandas as pd
data = {"W":[1,2,3,'4',5],
        "X":[3,4,5,6,7],
        "Y":[10,20,30,40,50],
        "Z":['PYTHON','ML','DL','DS','NLP']}
test_df = pd.DataFrame(data)
test_df.dtypes

test_df.select_dtypes(exclude=object)

test_df.select_dtypes(include=object)

test_df.select_dtypes(include=[int,float])

test_df.describe()          # It will give statistical  Information related to data

# only X column with index
test_df['X']

df = pd.read_csv('/content/iplmatches.csv')
df

df.info()       # Information related to data

# Access DataFrame Values

df['city']

df[['city']]

#Access columns

x = df['city']
print(type(x))
x

x = df[['city','date']]
x

# To Access Multiple columns
# df[list_of_columns_name]

z = df[['city','date','win_by_runs','win_by_wickets']]
z

df[['city']]

a = df[['city']]  # DF
type(a)

a = df['city']  # Series
type(a)

#iloc
# df.iloc[row_index,column_index]
# df.iloc[row_index]
# df.iloc[:,column_index]
# df.iloc[row_index_list,column_index_list]

df = pd.read_csv('/content/iplmatches.csv')
df

df.iloc[:,:]  # All rows and all columns

df.iloc[1:5,:]  # 1,2,3,4 rows and all columns

df.iloc[1:5]  # 1,2,3,4 rows and all columns

df.iloc[412:415] #412,413,414

df.iloc[:,0:6] # all rows and 0,1,2,3,4,5 columns

df.iloc[:,2:] # all rows columns after 2

df.iloc[:,1:4] #  all rows and 1,2,3 columns

df.iloc[[30,50,60,90,120],[1,3]]

df.iloc[[1]]

df.iloc[[1],[2]] #DataFrame

df.iloc[1,2] #object/string

df.iloc[0,-2] # umpire2 of 0th row

df.iloc[0:,-5:-1]  # all rows and -5,-4,-3,-2 columns

df.iloc[:5]

df = pd.DataFrame(array1,columns=list("ABCDE"),index=list("PYTHON"))
df

df.iloc[2:4,:]

df.iloc[2:4,1:3]

df.iloc[[2,5],:]

# loc (last index also included)
# df.loc[row_labels,column_lables]

df.loc[:,:]

df.loc['Y':'H',:]

df.loc['Y':'H','B':'D']

df.loc[:'H','B':]

df.loc[['P','T','H'],'B':]  # ROW P,T,H  and Column B,C,D,E

df.loc[['P','T','H'],['B','D']]

import pandas as pd
df = pd.read_csv('/content/iplmatches.csv')
df

df.loc[2:5,:]  #2,3,4,5 rows and all columns

df.iloc[2:5,:]  #2,3,4 rows

df.loc[2:5,'id':'result']  #2,3,4,5 rows and from id to result columns

df.iloc[3:6]

df.loc[3:6]   #3,4,5,6, rows

df.loc[4:6,'team1':]

# First 6 Rows
df[:6]

df.iloc[:6]

# head()

# Used to access first N rows
# df.head(5)
# Default Values >> 5

df.head()

df.head(10)  # First 10 rows

row_count = df.shape[0]
print("Row count is:",row_count)

col_count = df.shape[1]
print("Column count is:",col_count)

df.iloc[-10:]

df.iloc[row_count-10:]

# df.tail()
# used to access last N rows
# df.tail(5)

df.tail()

import pandas as pd

# Pandas Function

# 1. Iterate DataFrame using For Loop:
      # df.items()
      # df.iteritems()
      # df.iterrows()
      # df.index
      # df.columns

# 2. DataFrame to Numpy(array) and array to list
      # df.values
      # df.to_numpy
      # df.value.tolist()
      # df.to_numpy().tolist()

df = pd.read_csv('/content/iplmatches.csv')
df

df.iloc[5:10,1:5]  # 5,6,7,8,9 rows and 1,2,3,4 columns

df.loc[3:9,'season':'toss_winner']

df[['season','city']]

df.head(3)

df.head(1)

df.tail()

df.tail(2)

for col_name in df:
  print(col_name)

for col_name,col_data in df.items():
  print(col_name)

for col_name,col_data in df.items():
  print(col_data)
  print("*"*40)

for col_name,col_data in df.items():
  print("Column name:",col_name)
  print(col_data)
  print("*"*40)

df.columns

for col_name in df.columns:
  print(col_name)

for row_name in df.index:
  print("Row name :",row_name)

for col_name in df:
  print(col_name)
  print("*"*30)

df1 = df.head(6)
df1

for row_name in df1.index:
  print(row_name)

df.loc[5] # 5th row

df.loc[[5]]

for row_name in df1.index:
  print(row_name)
  print(df1.loc[row_name]) # Series
  print("*"*30)

for row_name in df1.index:
  print(row_name)
  print(df1.loc[[row_name]]) # DataFrame
  print("*"*30)

# df.iteritems

for col_name,col_data in df.items():
  print("Column Name:",col_name)
  print(col_data)
  print("*"*30)

df2 = df[['season','city','team1','team2','result']]
df2

for row_label, row_data in df.iterrows():
  print("Row label:", row_label)

for row_label,row_data in df.iterrows():
  print("Row label",row_label)
  print(row_data)
  print("*"*50)

arr1 = np.random.randint(30,50,size=10)
arr1

arr1.tolist()

s1 = pd.Series([34,22,78,38,65,29,44,59,19])
s1.tolist()

for row_label,row_data in df.iterrows():
  print("Row label",row_label)
  print(row_data.tolist())
  print("*"*100)

arr2 = np.random.randint(20,40,size=(5,3))
arr2

arr2.tolist()

df2 = pd.DataFrame(arr2)
df2

# DataFrame to array

df = pd.read_csv('/content/iplmatches.csv')
df

df1 = df.head(5)
df1

# DataFrame to array
# df.values()
df1.values

# DataFrame to list

df1.values.tolist()

# DataFrame to Numpy
df1.to_numpy()

df1.to_numpy().tolist()

import numpy as np
import pandas as pd
arr2 = np.random.randint(10,40,size=(5,3))
df2 = pd.DataFrame(arr2)
df2.iloc[2,1]=100
df2

df2.iloc[3,2]=np.NAN
df2

# Missing Values are denoted by NaN
#DataType of Null Values(NaN) Will be float
# np.nan

arr2 = np.random.randint(10,40,size=(5,6))
df2 = pd.DataFrame(arr2)
df2.iloc[2,1]=100
df2

df2.iloc[3,3] = np.nan
df2

df = pd.read_csv('/content/iplmatches.csv')
df

df.isna()

df.isnull()

df.isna().sum()

df.isnull().sum()

# Handle Missing values:
# Drop Missing Value

# Drop Row

df

df.dropna()

df.dropna()

df.dropna(thresh=7) # 7 Non Null Columns

df.dropna(thresh = df.shape[1])  # 7 Non Null Columns

df.dropna(thresh=6)  # 6 Non null columns

df.dropna(thresh=5)  # 5 Non Null Columns or 2 missing values are acceptable

df.dropna(axis=1)

df.dropna(axis=1, thresh=df.shape[0])

df.dropna(axis=1,thresh=10)

df.isna().mean()*100

df.drop('id',axis=1)

df.drop(['id','season'],axis=1)

df

df.drop(['id','season','city'],axis=1)

diabetes_df = pd.read_csv('/content/diabetes (2).csv')
diabetes_df

x = diabetes_df.drop('Outcome',axis=1) # DF
y = diabetes_df['Outcome']             # Series

x

y

diabetes_df.drop(0,axis=0)  # 0th row get droped

diabetes_df.drop([0,2,4,6,8,10],axis=0)

df

df.isna()

# df.fillna()

df.fillna(1000)

df.fillna('python')  # Nan values converted to python

# Statistics

df = pd.read_csv('/content/iplmatches.csv')
df

df.describe()

df['win_by_runs'].mean()

win_by_runs = df['win_by_runs'].mean()
win_by_runs

# fillna()
df['umpire2'].fillna(1000)

df['umpire3'].isna()

df['umpire3'].isna().sum()  # There are total 637 nan values in umpire3 column

# Median

median_season = df['season'].median()
median_season

df['umpire2'].fillna('Python')

x = df['win_by_wickets'].median()
x

df['umpire1'].isna().sum()   # There are total 2 nan values in umpire1 column

df['umpire1'].fillna(x)      # nan values in umpire1 column is replaced by median of win_by_wickets

# mode

df['toss_decision'].mode()[0]

df

df['win_by_runs'].fillna(int(df['win_by_runs'].mode()[0]))

df

df.iloc[1,-4]

df.iloc[1,-4] = "Ranjiv Gandhi Stadium"
df

# Quantiles

df['win_by_wickets'].quantile(0.50)

df['win_by_wickets'].quantile(0.25)

df['win_by_wickets'].quantile(0.75)

df['win_by_wickets'].quantile(0.90)