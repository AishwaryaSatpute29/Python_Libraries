# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QeP4e1Prs0v_sKN6p-0ukTs4SQz7xaN8
"""

# 1.pandas : Read Data, Perform EDA
# 2.Numpy  : Mathamatical Operations
# 3.scikit-learn: sklearn
#         ML algorithms
#         pre-processing
#         Feature Selection
#         Feature Extraction
#         Evaluation

# Visualization:
# 4.Matplotlib
# 5.seaborn
# 6.plotly(3D plot)

# 7.statsmodel
# 8.scipy : scientific python
# 9.Image Processing:
#       1.openCV >> cv2 >> Computer Vision >> Img
#       2.PIL

# 10.Tensorflow : Deep learning
# 11.nltk : Natural Language Toolkit : NLP : Text Data

# 12.imblearn
# 13.pdf2image
# 14.OCR:
#     1.pytesseract-TesseractOCR
#     2.Easy OCR
#     3.Google OCR
#     4.Amazon Textract

import sklearn

from sklearn.linear_model import LinearRegression

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score,mean_absolute_error

# NUMPY : Numerical Python

import numpy as np
import pandas as pd

# Application of Numpy
# 1.Linear Algebra
# 2.Statistics
# 3.Trignometry
# 4.Matrix operations
# 5.Image Processing
# 6.Logarithmic

array1 = np.array([2,3,4,5,6])
array1

print(array1)

# list is the collection of heterogenous Datatype
list1 = ['python',34,78.9]
list1

# array is the collection of homogenous Datatype
arr1 = np.array(['python',34,78.9])
arr1

# array is the collection of homogenous Datatype
# numpy is faster than list
# numpy is written in c and c++ language (partially in python)
# C language is faster than list
# int >> float >> complex >> str

# Numpy Function

# np.array()
# array.ndim
# array.shape
# array.tolist()  : N-Dimensional Numpy array tolist

# list is the collection of heterogenous Datatype
list1 = [2,4,5.7,"python"]
list1

# array is the collection of homogenous Datatype
array1 = np.array([3,4,5,6.8,7,9])
array1

array1 = np.array([4,5,6.8,7,'9'])
array1

list1 = [2,4,5.7,"python"]
list1

list1 = [4,5,6,7,8,9]
array1 = np.array(list1)
array1

set1 = {4,5,6,7,8,9}
array1 = np.array(set1)
array1

array1 = np.array([2,3,6.7,5.2,4+3j])
array1

# Type casting in Numpy array

# int >> float
# int >> complex
# int >> str/object

# Type casting in Numpy array

array1 = np.array([2,3,4,5,6])
array1

array1 = np.array([2,3,4,5,6],dtype=int)
array1

array1 = np.array([2,3,4,5,6],dtype='int')
array1

array1 = np.array([2,3,4,5,6],dtype='i')
array1

array1 = np.array([2,3,4,5,6],dtype=float)
array1

array1 = np.array([2,3,4,5,6],dtype='float')
array1

array1 = np.array([2,3,4,5,6],dtype='f')
array1

array1 = np.array([2,3,4,5,6],dtype=complex)
array1

array1 = np.array([2,3,4,5,6],dtype='complex')
array1

array1 = np.array([2,3,4,5,6],dtype=str)
array1

array1 = np.array([2,3,4,5,6],dtype='str')
array1

array1 = np.array([2,3,4,5,6],dtype=object)
array1

# Complex to other datatype(we can not convert complex to integer datatype)

array1 = np.array([2+5j,3,4,5.3,6])
array1

# Numeric Operation

array2 = np.array([4,5,6,7,8])
array2

list1 = [3,4,5,6,7]
cube_list = [i**3 for i in list1]
cube_list

list1 = [3,4,5,6,7]
for i in list1:
  x=i**3
  print(x)

list1 = [3,4,5,6,7]
multiply_result = [i*10 for i in list1]
multiply_result

list1 = np.array([3,4,5,6,7])
list1 * 10

array2 = np.array([2,3,4,5,6])
array2 ** 2

array2 = np.array([2,3,4,5,6])
array2 ** 3

array2 = np.array([2,3,4,5,6])
array2

array2 = np.array([2,3,4,5,6])
array2-5

list1 = [3,4,5,6,7,8]
array1 = np.array(list1)
array1 ** 3

import numpy as np
list1 = [3,4,5,6,7,8]
array1 = np.array(list1)**3
array1.tolist()

import numpy as np
list1 = [3,4,5,6,7,8,9]
cube = np.array(list1)**3
list(cube)

# Dimention in numpy array
# Zero Dimentional array

array0 = np.array(50)
array0

array0 = np.array(50)
array0.ndim

array0 = np.array(50)
print("Number of Dimentions are:",array0.ndim)

# One Dimentional array: It is collection of multiple 0D arrays
array0 = np.array([2,3,6,7,8])
print("Number of Dimentions are:",array0.ndim)

# Two Dimentional array: It is collection of multiple 1D arrays
array1 = np.array([[4,5,6],[7,8,9],[1,2,3]])
print("array is",array1)
print("Number of Dimentions are:",array1.ndim)

list1 = [[4,5,6],[7,8,9],[1,2,3]]
len(list1)

array2 = np.array([[2,3,4],[6,7,8],[5,6,7],[4,5,6]])
array2

array2.ndim

array2.shape

array2 = np.array([[2,3,4],[6,7,8],[5,6,7],[4,5,6]])
print("Number of rows",array2.shape[0])
print("Number of columns",array2.shape[1])

# Three Dimentional Array: It is collection of multiple 2D arrays

array3 = np.array([[[1,2,3],[4,5,6],[7,8,9]]])
array3

array3 = np.array([[[1,2,3],[4,5,6],[7,8,9]]])
array3
print("Dimention of the array is:",array3.ndim)

array3 = np.array([[[2,3,4],[3,4,5],[5,6,7]],[[10,20,30],[40,50,60],[70,80,90]]])
array3

array3.shape

# Accessing items using indexing and slicing

array1 = np.array([4,5,6,7,8])
array1

array1[0]

array1[3]

array2 = np.array([[3,4,5],[6,7,8],[1,2,3]])
array2

array2.shape

array2 = np.array([[3,4,5],[6,7,8],[1,2,3]])
array2[0][2]

array2 = np.array([[3,4,5],[6,7,8],[1,2,3]])
array2[1,2]

array2 = np.array([[3,4,5],[6,7,8],[1,2,3]])
array2[2,-2]

array2 = np.array([[3,4,5],[6,7,8],[1,2,3]])
array2[-1,1]

array2 = np.array([[3,4,5],[6,7,8],[1,2,3]])
array2[2,1]

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2[0:2]

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2[:2]

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2[:,2]

array2 = np.array([10,20,30,35,40,50,60,65,70,80,90,95])
array2[:3]   # 0,1,2

array2 = np.array([10,20,30,35,40,50,60,65,70,80,90,95])
array2[-4:] # -4,-3,-2,-1

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2[1:,:]

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2[1:,2:]

array2 = np.array([[10,20,30,35],[40,50,60,65],[70,80,90,95]])
array2[:2,:2]

array2[:,:]

# Conversion of dimention of an array

array1 = np.array([3,4,5,8,10,50],ndmin=2)
array1

array1 = np.array([3,4,5,8,10,50],ndmin=3)
array1

# We can not convert 2D array into 1D
# We can not convert 3D array into 1D  and 2D
array1 = np.array([[3,4,5,8,10,50]],ndmin=1)
array1

array1 = np.array([[[3,4,5,8,10,50]]],ndmin=1)
array1

array1 = np.array([[3,4,5,8,10,50]],ndmin=5)
array1

# Numpy Function

# np.array()
# array.ndim()
# array.shape
# array.reshape()
# array.tolist()
# np.nditer()
# np.ndenumerate()
# array.flatten  #  copy
# array.ravel()  #referance
# array.copy()
# np.zeros()
# np.ones()
# np.full()
# np.arange()
# np.around()
# np.linspace()
# np.eye()
# np.identity()
# np.random:
#     np.random.rand()  # 0 to 1
#     np.random.randint()
#     np.random.randn()
#     np.random.ranf()  # 0 to 1

# Reshape
array1 = np.array([3,4,5,8,10,50,6,8,90,20,51,66])
array1

array1.shape

array1.reshape(3,4)

array1.reshape(4,3)

# 1D to 3D

array1 = np.array([3,4,5,8,10,50,6,8,90,20,51,66])
array1

# 3D array
array1.reshape(2,3,2)

# 3D array
array1.reshape(1,6,2)

# 2D array
array1.reshape(2,6)

# For loop

#1D array
arr1 = np.array([4,5,6,7,8,10,20,30,40,50])
arr1

for i in arr1 :
  print(i)

#2D array

arr1 = np.array([[4,5,6,7],[20,30,40,50]])
arr1

for i in arr1:
  print(i)

for i in arr1:
  for j in i:
    print(j)

#3D array

arr1 = np.array([[[4,5,6,7],[20,30,40,50],[12,13,14,15],[44,45,46,47]]])
arr1

for i in arr1:
  for j in i:
    for k in j:
      print(k)

# nditer()

arr1 = np.array([20,30,40,50,60])
arr1

for i in np.nditer(arr1):
  print(i)

arr1 = np.array([[20,30,40],[50,60,70]])
arr1

for i in np.nditer(arr1):
  print(i)

arr1 = np.array([[[20,30,40],[50,60,70],[80,90,100]]])
arr1

for i in np.nditer(arr1):
  print(i)

# np.ndenumerate()
arr1 = np.array([20,30,40,50,60])
arr1

for i in np.ndenumerate(arr1):
  print(i)

for i,v  in np.ndenumerate(arr1):
  print(i,v)

arr1 = np.array([[4,5,6],[20,30,40],[50,60,70]])
arr1

for i,v in enumerate(arr1):
  print(i,v)

for i,v in np.ndenumerate(arr1):
  print(f"Value at index {i} is {v}")

arr1 = np.array([[[4,5,6],[20,30,40],[50,60,70],[80,90,100]]])
arr1

for i,v in np.ndenumerate(arr1):
  print(f"Value at index {i} is {v}")

arr1 = np.array([[[4,5,6],[20,30,40],[50,60,70],[80,90,100]]])
arr1.reshape(12)

# flatten

# Used to convert n-Dimensional array to 1-D array

arr3 = np.array([[[3,4,5],[6,7,8],[9,10,11],[12,13,14]]])
arr4 = arr3.flatten()
arr4

# ravel

# Used to convert n-Dimensional array to 1-D array

arr3 = np.array([[[3,4,5],[6,7,8],[9,10,11],[12,13,14]]])
arr4 = arr3.ravel()
arr4

# copy

list1 = [[4,5,6],[7,8,9]]
list2 = list1.copy()   # shallow copy
print("list1:",list1)
print("list2:",list2)

arr1 = np.array([[4,5,6],[7,8,9]])
arr2 = arr1.copy()
print("arr1:\n",arr1)
print("arr2: \n",arr2)

arr1 = np.array([[4,5,6],[7,8,9]])
arr2 = arr1 # Referance

arr1[0,0] = 400

print("arr1:\n",arr1)
print("arr2: \n",arr2)

arr1 = np.array([[4,5,6],[7,8,9]])
arr2 = arr1.ravel()
print(arr2)

arr1 = np.array([[4,5,6],[7,8,9]])
arr2 = arr1.ravel()
print(arr2)
arr2[3] = 7777

print("arr2: \n",arr2)

# Zeros
list1 = [0,0,0,0,0,0,0,0,0,0]

arr1 = np.zeros(10,dtype = int)
arr1

arr1 = np.zeros([4,5],dtype = int)
arr1

arr1 = np.zeros([5,5],dtype = int)
arr1

arr1 = np.zeros(150,dtype = int)
arr1

#ones
arr1 = np.ones(5,dtype = float)
arr1

arr1 = np.ones(5,dtype = int)
arr1

arr1 = np.ones((4,5),dtype = int)
arr1

arr1 = np.ones((4,3,2),dtype=int)
arr1

# full

arr = np.full(10,2)
arr

arr = np.full(10,3)
arr

arr = np.full(10,0)
arr

arr = np.full((4,5),1)
arr

np.zeros(10,int)

np.full(10,0)

# arange()

range(4,10)

for i in range(4,10):
  print(i)

list(range(4,10))

arr1  = np.arange(4,10)
arr1

arr1 = np.arange(0,21,2)
arr1

arr1 = np.arange(10,0,-1)
arr1

arr1 = np.arange(-10,0,1)
arr1

arr1 = np.arange(-5,6)
arr1

# around()

np.around(45.16784,2)

arr1 = np.array([45.3793,21.968,75.3467,58.362])
result = np.around(arr1,2)
result

arr1 = np.array([[45.3793,21.968],[75.3467,58.362]])
result = np.around(arr1,2)
result

arr1 = np.array([[45.3793,21.968],[75.3467,58.362]])
result = np.around(arr1,2)
x=result.tolist()
print(x)
print(type(x))

# linspace()

# np.linspace(start,end,num=50)
# It return evenly spaced value

np.linspace(1,50,dtype=int)

np.linspace(1,100,dtype=int)

140.8164773-132.6589438

442.8522362-434.6927715

np.linspace(10,30,num=5,dtype=int)

np.linspace(10,20,num=10,retstep=True)

np.linspace(10,20,num=5,retstep=True)

# eye
arr1= np.eye(4,dtype=int)
arr1

arr1= np.eye(6,dtype=int)
arr1

arr1= np.eye(4,5,dtype=int)  # creates a 2D array with ones on the diagonal and zeros in all other position
arr1

arr1= np.eye(4,7,dtype=int)
arr1

# identity()


#  used to create an identity matrix
# This is commonly used in linear algebra and numerical computations.

# Diagonal elements are all 1s.
# Non-diagonal elements are all 0s.


arr1 = np.identity(4,dtype=int)
arr1

arr1 = np.identity(5,int)
arr1

# random

# Used to generate random numbers

# random:
# 1.random.rand
# 2.random.randint
# 3.random.randn
# 4.random.ranf

# 1.random.rand
# It return random values between 0 to 1

arr1 = np.random.rand(5)
arr1

arr1 = np.random.rand(10)
arr1

# random 2D array
arr1 = np.random.rand(2,3)
arr1

# 2.random.randint
# Used to generate random numbers
# np.random.randint (start_value, end_value, size = 1)

arr1 = np.random.randint(10,100,size=10)
arr1

arr1 = np.random.randint(10,13,size=10)
arr1

arr1 = np.random.randint(10,30,size=(4,3))
arr1

arr1 = np.random.randn(100)
import seaborn as sns
sns.kdeplot(arr1)

# 3. random.randn()
# It return sample from normally distributed data
# Normal Distribution >> Gussian Distribution

import seaborn as sns

sns.kdeplot(arr1)

# 4.random.ranf()

# It return  value in 0 to 1

arr1 = np.random.ranf(10)
arr1

import pandas as pd

arr1 = np.random.randint(10,30,size=(4,3))
df = pd.DataFrame(arr1)
df

arr1 = np.random.randint(10,50, size=(10,3))
df = pd.DataFrame(arr1)
df

dict1 = {"Zeroes":np.zeros(10,dtype=int)}
df = pd.DataFrame(dict1)
df

dict1 = {"Zeros": np.zeros(10,dtype=int),
         "Ones": np.ones(10,dtype=int),
         "arange": np.arange(10,20),
         "Linspace": np.linspace(10,40,num=10),
         "Randint": np.random.randint(10,50,size=10),
         "Full": np.full(10,4)}

df = pd.DataFrame(dict1)
df

import numpy as np

arr1 = np.array([3,4,5,6,7,8,9])
arr1

arr1[2] = 500
arr1

arr1[2:5] = 500
arr1

# np.append()

# new_array = np.append(arr1,value,axis=None)
# value  >> n-D array
# axis 0 >> Rows
# axis 1 >> Columns

arr1 = np.array([3,4,5,6,7,8])
new_arr = np.append(arr1,900)
new_arr

arr1 = np.array([3,4,5,6,7,8])
arr0 = np.array(100)
new_arr = np.append(arr1,arr0)
new_arr

arr1 = np.array([3,4,5,6])
arr0 = np.array([10,20,30,40])
new_array = np.append(arr1,arr0)
new_array

arr1 = np.array([3,4,5,6])
arr0 = np.array([[10,20],[30,40]])
print("Array1:\n",arr1)
print("Array0:\n",arr0)
new_array = np.append(arr1,arr0)
print("New_array",new_array)

arr1 = np.array([[2,3],[4,5]])
arr2 = np.array([[6,7],[8,9]])
print("arr1:",arr1)
print("arr2:",arr2)
new_arr = np.append(arr1,arr2)
new_arr

# we can not append different dimensions of an arrays like 2D and 3D
import numpy as np

arr1 = np.array([[[4,5,6],[44,55,66]]])
arr2 = np.array([[10,20,30],[40,50,60]])

result = np.append(arr1,arr2,axis=0)
result

# axis 0 >> Rows
# axis 1 >> Columns

arr1 = np.array([[3,4],[5,6]])
arr2 = np.array([[7,8],[9,10]])

print("Array1:\n",arr1)
print("Array2:\n",arr2)

new_array = np.append(arr1,arr2,axis=0)
new_array

# concatenate

# np.concatenate()

array1 = np.random.randint(0,10,size=(2,2))
array2 = np.random.randint(10,20,size=(2,2))
array3 = np.random.randint(20,30,size=(2,2))

print("Array1: \n",array1)
print("Array2: \n",array2)
print("Array3: \n",array3)

new_array = np.concatenate((array1.reshape(-1), array2.reshape(-1),array3.reshape(-1)))
new_array

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
arr3 = np.array([7,8,9])
new_array = np.concatenate([arr1,arr2,arr3], axis=0)
new_array

arr1 = np.array([[1,2,3]])
arr2 = np.array([[4,5,6]])
new_arr = np.concatenate([arr1,arr2],axis=1)
new_arr

arr1 = np.array([[[1,2,3]]])
arr2 = np.array([[[4,5,6]]])
new_arr = np.concatenate([arr1,arr2],axis=1)
new_arr

import pandas as pd

pd.DataFrame(new_array)

# new_array = np.sort(array)
arr1 = np.random.randint(20,50, size=6)
arr1

sorted_array = np.sort(arr1)
sorted_array

arr1 = np.random.randint(20,50,size=(3,4))
print("arr1:",arr1)
sorted_array=np.sort(arr1)
print("sorted array\n",sorted_array)

# (axis=None) helps to sort whole array

arr1 = np.random.randint(20,50,size=(3,4))
print("arr1:",arr1)
sorted_array=np.sort(arr1,axis=None)
print("sorted array\n",sorted_array)

# Matrix Addition

arr1 = np.random.randint(10,20,size=(2,2))
arr2 = np.random.randint(30,40,size=(2,2))

print("Array1:\n",arr1)
print("Array2:\n",arr2)

matrix1 = np.random.randint(10,20,size=(2,2))
matrix2 = np.random.randint(30,40,size=(2,2))

print("matrix1:\n",matrix1)
print("matrix2:\n",matrix2)

np.add(matrix1,matrix2)

arr1 = np.random.randint(10,20,size=5)
arr2 = np.random.randint(20,30,size=5)

print("Array1:",arr1)
print("Array2:",arr2)

np.add(arr1,arr2)

# Multiplication

Matrix1 = np.random.randint(10,20,size=(2,2))
Matrix2 = np.random.randint(20,30,size=(2,2))

print("Matrix1:\n",Matrix1)
print("Matrix2:\n",Matrix2)
np.multiply(Matrix1,Matrix2)

Matrix1 = np.random.randint(10,20,size=5)
Matrix2 = np.random.randint(20,40,size=5)

print("Matrix1:\n",Matrix1)
print("Matrix2:\n",Matrix2)
np.multiply(Matrix1,Matrix2)

arr1 = np.random.randint(10,20,size=(2,2))
arr2 = np.random.randint(20,30,size=(2,2))

print("arr1 :",arr1 )
print("arr2 :",arr2 )

new_array = np.dot(arr1,arr2)
new_array

Matrix1 = np.random.randint(1,10,size=(2,10))
Matrix2 = np.random.randint(10,20,size=(10,3))

print("Matrix1:\n",Matrix1)
print("Matrix2:\n",Matrix2)

new_array = np.dot(Matrix1,Matrix2)
new_array

arr1 = np.array([2,6,8,3,4,9,7])
arr1+10

arr1-1

arr1*10

arr1 = np.array([23,5,9,5,6])
arr1/3

arr1 = np.array([2,3,5,9,5,6])  # // (floor division)
arr1//2

arr1 = np.array([2,3,5,9,5,6])   #  **(Exponent)
arr1**2

arr1 = np.array([2,3,5,9,5,6])
arr1**3

np.floor([4.23,3.22,6.89,5.33])

np.floor(6.34)

np.ceil(4.55)

arr1 = np.array([2.33,5.34,9.67,7.89])
result = np.floor(arr1)
result

arr1 = np.array([2.33,5.34,9.67,7.89])
result = np.ceil(arr1)
result

arr1 = np.array([[2.33,5.34],[9.67,7.89]])
result = np.ceil(arr1)
result

# np.sqrt()

arr1 = np.array([76,88,32,97,34])
arr1**0.5

np.sqrt(arr1)

np.sqrt(484)

np.sqrt(625)

round(88.6794645,2)

np.around(88.6794645,2)

np.around([88.6794645,58.8776266],2)

np.around([88.6794645,58.8776266],2).tolist()

arr1 = np.random.randint(1,200,size=5)
print("Array 1:",arr1)
np.sqrt(arr1)

arr1 = np.array([67,34,89,22,14,57])
np.cbrt(arr1)

arr1 = np.random.randint(20,100,size=5)
np.cbrt(arr1)

list1 = [3,4,5,6,7,8,6]
list1.index(7)

index_list = [i for i,val in enumerate(list1) if val == 6]
index_list

list1 =  [3,4,5,6,7,8,6,9,2]
num = 9
index_list = [i for i,val in enumerate (list1) if val==num ]
index_list

list1 =  [3,4,5,6,7,8,6,9,2]
num = 9
for i,val in enumerate(list1):
  if val==num:
    print(i)

list1 =  [3,4,5,6,7,4,8,6,9,2]
num = 4
index_list = [i for i,val in enumerate (list1) if val==num ]
index_list

# np.where
# index = np.where(condition)

list1 = [2,5,8,6,9,7,5,4,3,1]
array1 = np.array(list1)
np.where(array1==5)

array1 = np.array([2,3,7,4,9,6,7,1])
list_index = np.where(array1>5)
list_index

array1 = np.array([2,5,8,6,9,7,5,4,3,1])
list_index = np.where(array1 == 5)
x=list_index[0]
x

array1 = np.array([10,40,20,60,90,70,50,30,80])
index_list = np.where(array1>=60)
x=index_list[0]
x

# Numpy statistics
# 1.Mean
# 2.Median
# 3.Mode
# 4.Variance
# 5.Standard Devaitation

# 1.  np.mean()
# 2.  np.median()
# 3.  np.std()
# 4.  np.var()
# 5.  np.max()
# 6.  np.min()
# 7.  np.sum()
# 8.  scipy.stats.mode()

import numpy as np

array1 = np.array([3,7,4,9,6,5,4])
mean = np.mean(array1)
mean

array1 = np.array([3,7,4,9,6,5,4])
mean = np.sum(array1)
mean

array1.shape[0]

# mean = sum of array / shape of array

np.sum(array1)/array1.shape[0]

array1 = np.random.randint(10,20,size=5)
print(array1)
mean=np.mean(array1)
print("Mean is:",mean)

# Median  >> middle value

array1 = np.array([2,5,7,9,3,4,6,1])
median = np.median(array1)     #array([1, 2, 3, 4, 5, 6, 7, 9]) sorted array
median

array1 = np.array([2,5,7,9,3,4,6])
median = np.median(array1)     #array([2, 3, 4, 5, 6, 7, 9]) sorted array
median

array1 = np.random.randint(20,40,size=10)
print(array1)
median = np.median(array1)
print("Median of array is:", median)

array1 = np.array([6,2,4,1,9,7])
array2 = np.sort(array1)
array2

x = int(array2.shape[0]/2)
x

(array2[x]+array2[x-1])/2

# Effect of outliers on mean(There is effect of outlier on mean values but not on median value)

array1 = np.array([3,9,4,8,5,7,1])
x=np.mean(array1)
x

array1 = np.array([3,9,4,8,5,7,1])
x=np.median(array1)
x

array1 = np.array([3,9,4,80,5,7,1])
x=np.mean(array1)
x

array1 = np.array([3,9,4,80,5,7,1])
x=np.median(array1)
x

array1 = np.random.randint(20,40,size=20)
print(array1)
mean=np.mean(array1)
std=np.std(array1)
print("Mean is:",mean)
print("Standard Deviation:",std)

array2 = np.array([3,9,7,1,5,8])
mean = np.mean(array2)
mean

array2 = np.array([3,9,7,1,5,8])
median=np.median(array2)
median

array2 = np.array([3,9,7,1,5,8])
std=np.std(array2)
std

# Variance

array1 = np.array([4,1,9,7,8,3,5])
variance=np.var(array1)
variance

array1 = np.array([27,19,14])
std=np.std(array1)
std

array1 = np.array([27,19,14])
variance=np.var(array1)
variance

array1 = np.array([27,27,27,27,27])
mean = np.mean(array1)
print("Mean is:",mean )

array1 = np.array([27,27,27,27,27])
median = np.median(array1)
print("Median is:",median )

array1 = np.array([27,27,27,27,27])
variance = np.var(array1)
print("variance  is:",variance )

array1 = np.array([27,27,27,27,27])
std = np.std(array1)
print(" Standard Deviation is:",std )

# Mode:  Most frequent value of an array

from scipy.stats import  mode

array2 = np.array([17,29,56,22,26,10,17,34,9,17])
Mode = mode(array2)
print("Mode is:",Mode[0])
Mode[0]

array2 = np.array([1,9,6,2,6,10,7,4,9,7])
Mode = mode(array2)
print("Mode is:",Mode[0])
Mode[0]

array2 = np.array([1,0,1,1,1,0,0,0,1,1,0,0,0,0])
Mode = mode(array2)
print("Mode is:",Mode[0])
Mode[0]

arr1 = np.random.randint(10,30,size=10)
print(arr1)
print("Mode is:",mode(arr1)[0])

arr1 = np.random.randint(20,40,size=10)
print(arr1)
mode(arr1)

arr1 = np.random.randint(20,40,size=(3,4))
print(arr1)
mode(arr1)

arr1 = np.array([6,7,10,40,24,29,79,45])
np.max(arr1)

arr1 = np.array([6,7,10,40,24,29,79,45])
np.min(arr1)

# np.log
# Natural log
# log transformation technique

np.log(40)

np.log(20)

np.log(10)

np.log(1)

arr1 = np.array([23,45,18,49,38,51,25])
np.log(arr1)

arr1 = np.array([23,45,18,409,38,51,25])
np.log(arr1)

arr1 = np.array([23,45,18,409,38,51,25])
np.sqrt(arr1)

# np.log2()

np.log(40)

np.log2(40)

np.log2(400)

# np.log10()

arr1 = np.array([7,2,9,6,3,4])
np.log10(array1)

# Numpy linear algebra
# 2x + 3y = 10
# 3x + 9y = 20
# x = 3.3
# y = 1.1

# Numpy linear algebra

#1 np.linalg.solve()
#2 np.linalg.inv()
#3 np.polynomial.Polynomial():
#      poly.roots()
# 4.np.linalg.eig()
# 5.np.linalg.eigvals()

import numpy as np

array_a = np.array([[2,3],[8,9]])
array_b = np.array([10,12])
print("Array A is:\n",array_a)
print("Array B is:\n",array_b)

np.linalg.solve(array_a,array_b)

array_a = np.array([[2,3,5],[6,7,1],[8,9,4]])
array_b = np.array([10,12,14])
print("Array A is:\n",array_a)
print("Array B is:\n",array_b)

# Inverse of an array

arr1 = np.array([[2,3],[6,7]])
np.linalg.inv(arr1)

arr1 = np.array([[12,30],[40,50]])
np.linalg.inv(arr1)

# Roots
# x2-5x+6=0
# a=1
# b=-5
# c=6

import numpy as np
from numpy.polynomial import polynomial

eq = np.polynomial.Polynomial([6,-5,1])
eq.roots()

eq = np.polynomial.Polynomial([6,-5,1])
print(eq)
eq.roots()

eq = np.polynomial.Polynomial([4,5,-1])
print(eq)
eq.roots()

from numpy.polynomial import Polynomial
poly = Polynomial([3,4,2,1])
poly

# Eigen Values

arr1 = np.random.randint(1,10,size=(2,2))
arr1

Eigen_Values = np.linalg.eigvals(arr1)
Eigen_Values

Eigen_Values,Eigen_Vectors = np.linalg.eig(arr1)
Eigen_Values

Eigen_Vectors

# Numpy Trignometry

# np.sin()
# np.cos()
# np.tan()
# np.deg2rad()
# np.rad2deg()


# sin >> opp/hypo
# cos >> adj/hypo
# tan >> opp/adjust_legend_subtitles

# cosec >> 1/sin
# sec >> 1/cos
# cot >> 1/tan

import numpy as np

np.pi      # 180 degree

import math

math.pi

np.sin(np.pi/6)  # sin30

np.sin(np.pi/4)  # sin45

np.sin(np.pi/3)  # sin60

np.sin(np.pi/2)  # sin90

np.sin(0)  # sin0

# cos

np.cos(np.pi/6)  # cos30

np.cos(np.pi/4)  # cos45

np.cos(np.pi/3)  # cos60

np.cos(np.pi/2)  # cos90

# tan

np.tan(np.pi/6)

np.tan(np.pi/4)

np.tan(np.pi/3)

sec_30 = 1/np.cos(np.pi/6)
sec_30

# Degree to radians

np.deg2rad(45)

np.deg2rad(30)

np.sin(np.pi/6)  #sin30

np.pi/6

rad_values = np.deg2rad([0,30,45,60,90])
np.sin(rad_values)

rad_values = np.deg2rad([0,30,45,60,90])
np.cos(rad_values)

rad_values = np.deg2rad([0,30,45,60,90])
np.tan(rad_values)

